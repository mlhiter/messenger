// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[]       @db.ObjectId
  // 与User模型关联的conversation模型(1-n)
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  // 与User模型关联的Message模型(1-n)
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

// 账户模型
// 账户是github账户/Google账户
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // 与Account关联的User模型(1-1)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 这两者的组合必须是unique
  @@unique([provider, providerAccountId])
}

// 聊天模型
model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  // 聊天里的消息
  messageIds String[]  @db.ObjectId
  messages   Message[]

  // 参与聊天的用户
  userIds String[] @db.ObjectId
  // 与Conversation关联的User模型(1-n)
  users   User[]   @relation(fields: [userIds], references: [id])
}

// 消息模型(一条)
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  // 看到该条Message的用户(单聊就1个，群组就可能有多个)
  seenIds String[] @db.ObjectId
  // 与Message通过Seen关系关联的User模型(1,n)
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  // Message所属的Conversation
  // NOTE: 删除conversation后对应的message都被级联删除
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Message的发送人
  // NOTE: 删除发送人（即该用户注销，其实没这个功能）后对应的聊天记录就会被级联删除
  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
